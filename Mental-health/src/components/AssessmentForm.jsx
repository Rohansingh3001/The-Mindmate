import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { ArrowLeft } from "lucide-react";
import jsPDF from "jspdf";
import "jspdf-autotable";
import Section from "./Section";
import Lottie from "lottie-react";
import CelebrateAnim from "../assets/celebrate.json";
import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from "recharts";

const sections = [
  {
    key: "phq9",
    title: "🎯 Level 1 – Mood Quest (PHQ-9)",
    maxScore: 27,
    questions: [
      "😶 I’m not enjoying stuff like I used to.",
      "😔 Lately, I’ve been feeling low or meh.",
      "🛌 Sleep is a mess — too much or barely any.",
      "🥱 Even after rest, I’m still drained.",
      "🍔 Food habits are off — eating too much or skipping.",
      "😞 I feel like I’m not good enough sometimes.",
      "💭 Focusing is hard — brain fog is real.",
      "🏃‍♂️ I either feel too slow or super restless.",
      "😢 Sometimes I just want to disappear or not exist.",
    ],
    scale: [0, 1, 2, 3],
    scaleLabels: {
      0: "😌",
      1: "😕",
      2: "😟",
      3: "😞",
    },
  },
  {
    key: "anxiety",
    title: "⚡ Level 2 – Anxiety Arena (GAD-7)",
    maxScore: 21,
    questions: [
      "😬 I’m often on edge or tense.",
      "🤯 My brain won’t stop overthinking.",
      "😓 Even simple stuff feels stressful.",
      "🧘 I struggle to chill or feel relaxed.",
      "🕺 I feel jumpy or like I need to move.",
      "😠 I get annoyed or lose it quickly.",
      "🔮 I worry something bad will happen, even if nothing’s wrong.",
    ],
    scale: [0, 1, 2, 3],
    scaleLabels: {
      0: "🧘",
      1: "😬",
      2: "😰",
      3: "😩",
    },
  },
  {
    key: "stress",
    title: "🔥 Final Level – Stress Showdown",
    maxScore: 21,
    questions: [
      "🧨 Hard to calm down when upset?",
      "😡 Small stuff makes me really angry.",
      "🔍 Feel tense or like I’m always alert.",
      "🙄 People get on my nerves easily.",
      "🧘‍♀️ Relaxing is tough, even when I try.",
      "🚨 Interruptions mess up my flow bad.",
      "💭 Sometimes I feel like ‘what’s the point?’",
    ],
    scale: [0, 1, 2, 3],
    scaleLabels: {
      0: "😌",
      1: "😣",
      2: "😤",
      3: "😵‍💫",
    },
  },
];

const interpretScore = (key, score, maxScore) => {
  const percentage = Math.round((score / maxScore) * 100);
  let status = "Balanced";

  if (key === "phq9") {
    if (score <= 4) status = "Minimal sadness";
    else if (score <= 9) status = "Mild sadness";
    else if (score <= 14) status = "Moderate low mood";
    else if (score <= 19) status = "Feeling quite low";
    else status = "Feeling very low";
  } else if (key === "anxiety") {
    if (score <= 4) status = "Calm";
    else if (score <= 9) status = "Mild worry";
    else if (score <= 14) status = "Anxious often";
    else status = "High anxiety";
  } else if (key === "stress") {
    if (score <= 7) status = "Chilled";
    else if (score <= 9) status = "Mildly stressed";
    else if (score <= 12) status = "Pretty stressed";
    else status = "Very stressed";
  }

  return `${status} (${percentage}% intensity)`;
};

export default function AssessmentForm() {
  const navigate = useNavigate();
  const [currentIndex, setCurrentIndex] = useState(0);
  const [scores, setScores] = useState({});
  const [answered, setAnswered] = useState({});
  const [submitted, setSubmitted] = useState(false);

  const currentSection = sections[currentIndex];
  const totalScore = Object.values(scores).reduce((acc, val) => acc + val, 0);
  const maxTotal = sections.reduce((acc, s) => acc + s.maxScore, 0);
  const totalPercent = Math.round((totalScore / maxTotal) * 100);

  const handleScoreUpdate = (key, score) => {
    setScores((prev) => ({ ...prev, [key]: score }));
    setAnswered((prev) => ({ ...prev, [key]: true }));
  };

  const handleNext = () => {
    if (!answered[currentSection.key]) {
      alert("Please answer all questions before proceeding.");
      return;
    }
    if (currentIndex < sections.length - 1) {
      setCurrentIndex(currentIndex + 1);
    }
  };

  const handleBack = () => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
    }
  };

  const handleSubmit = () => {
    const allAnswered = sections.every((section) => scores[section.key] !== undefined);
    if (allAnswered) {
      setSubmitted(true);
    } else {
      alert("Please complete all sections before submitting.");
    }
  };

  const handleDownloadPDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(22);
    doc.setTextColor(128, 0, 128);
    doc.text("MindMates Emotional Wellness Report", 14, 20);
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.text("Generated by The MindMates – themindmate2025.vercel.app", 14, 30);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 14, 36);
    let y = 50;
    sections.forEach((section) => {
      const score = scores[section.key];
      const result = interpretScore(section.key, score, section.maxScore);
      doc.setFontSize(13);
      doc.setTextColor(40, 40, 40);
      doc.text(`${section.title}: ${score}/${section.maxScore} – ${result}`, 14, y);
      y += 10;
    });
    doc.setFontSize(14);
    doc.setTextColor(91, 55, 183);
    doc.text(`Overall Positivity: ${100 - totalPercent}%`, 14, y + 10);
    doc.setFontSize(10);
    doc.setTextColor(120, 120, 120);
    doc.text("This is a self-check. Not a diagnosis. Stay positive and reach out if needed!", 14, y + 25);
    doc.setFontSize(10);
    doc.setTextColor(150, 150, 150);
    doc.text("© The MindMates – All rights reserved", 14, 290);
    doc.save("MindMates_Emotional_Wellness_Report.pdf");
  };

  const handleRetake = () => {
    setScores({});
    setAnswered({});
    setSubmitted(false);
    setCurrentIndex(0);
  };

  return (
    <div className="w-full max-w-5xl mx-auto px-4 py-10">
      <div className="mb-6">
        <button
          onClick={() => navigate(-1)}
          className="inline-flex items-center gap-2 text-sm font-medium text-purple-700 dark:text-purple-300 hover:underline transition"
        >
          <ArrowLeft size={16} /> Go Back
        </button>
      </div>

      <h1 className="text-4xl font-extrabold text-center text-purple-800 dark:text-purple-200 mb-8">
        💬 How Are You Feeling Today?
      </h1>

      <div className="bg-white dark:bg-gray-900 border border-purple-200 dark:border-purple-700 rounded-2xl p-8 shadow-xl">
        {!submitted ? (
          <>
            <h2 className="text-2xl font-semibold mb-6 text-purple-700 dark:text-purple-300">
              {currentSection.title} ({currentIndex + 1} of {sections.length})
            </h2>

            <Section
              sectionKey={currentSection.key}
              title={currentSection.title}
              questions={currentSection.questions}
              scale={currentSection.scale}
              scaleLabels={currentSection.scaleLabels}
              onScore={handleScoreUpdate}
            />

            <div className="mt-8 flex justify-between">
              <button
                onClick={handleBack}
                disabled={currentIndex === 0}
                className={`py-2 px-6 rounded-xl font-semibold transition text-sm shadow ${
                  currentIndex === 0
                    ? "bg-gray-200 text-gray-500 cursor-not-allowed"
                    : "bg-gray-300 hover:bg-gray-400 text-black dark:bg-gray-700 dark:text-white dark:hover:bg-gray-600"
                }`}
              >
                Previous
              </button>

              {currentIndex < sections.length - 1 ? (
                <button
                  onClick={handleNext}
                  className="bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-6 rounded-xl text-sm shadow"
                >
                  Next
                </button>
              ) : (
                <button
                  onClick={handleSubmit}
                  className="bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-6 rounded-xl text-sm shadow"
                >
                  Submit
                </button>
              )}
            </div>
          </>
        ) : (
          <div className="text-center space-y-8">
            <div className="w-40 mx-auto">
              <Lottie animationData={CelebrateAnim} loop={false} />
            </div>

            <h2 className="text-3xl font-bold text-green-600 dark:text-green-400">You're Doing Great! 🌟</h2>

            <div className="w-full h-64">
              <ResponsiveContainer>
                <PieChart>
                  <Pie
                    data={sections.map((s) => ({ name: s.title, value: scores[s.key] }))}
                    cx="50%"
                    cy="50%"
                    label
                    outerRadius={80}
                    dataKey="value"
                  >
                    <Cell fill="#a78bfa" />
                    <Cell fill="#60a5fa" />
                    <Cell fill="#f87171" />
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>

            <div className="flex justify-center gap-6 text-sm mt-4 text-gray-600 dark:text-gray-300">
              <div className="flex items-center gap-2"><span className="w-3 h-3 bg-purple-400 rounded-full"></span> Mood</div>
              <div className="flex items-center gap-2"><span className="w-3 h-3 bg-blue-400 rounded-full"></span> Anxiety</div>
              <div className="flex items-center gap-2"><span className="w-3 h-3 bg-red-400 rounded-full"></span> Stress</div>
            </div>

            <p className="text-xl font-semibold text-purple-700 dark:text-purple-300">
              You're {100 - totalPercent}% on the bright side today 💜
            </p>

            <div className="flex flex-col sm:flex-row justify-center gap-4 mt-6">
              <button
                onClick={handleDownloadPDF}
                className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-6 rounded-xl transition shadow"
              >
                Download Report
              </button>
              <button
                onClick={handleRetake}
                className="bg-gray-200 hover:bg-gray-300 text-black dark:bg-gray-700 dark:text-white dark:hover:bg-gray-600 font-semibold py-2 px-6 rounded-xl transition shadow"
              >
                Retake Test
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
